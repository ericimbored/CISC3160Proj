class Tokens(object):
    def __init__(self, type, value):
        self.type = type
        self.value = value

    def __str__(self):
        return 'Tokens({type}, {value})'.format(
            type=self.type,
            value=repr(self.value)
        )

    def __repr__(self):
        return self.__str__()


class Lex(object):
    def __init__(self, text):
        self.text = text
        self.pos = 0
        self.current_char = self.text[self.pos]

    def error(self):
        raise Exception('Invalid character/s')

    def advance(self):
        self.pos += 1
        if self.pos > len(self.text) - 1:
            self.current_char = None 
        else:
            self.current_char = self.text[self.pos]

    def swsp(self): #skip white space
        while self.current_char is not None and self.current_char.isspace():
            self.advance()

    def int(self): #integer
        result = ''
        while self.current_char is not None and self.current_char.isdigit():
            result += self.current_char
            self.advance()
        return int(result)

    def gnt(self): #get next token
        while self.current_char is not None:

            if self.current_char.isspace():
                self.skip_whitespace()
                continue

            if self.current_char.isdigit():
                return Tokens(INTEGER, self.integer())

            if self.current_char == '+':
                self.advance()
                return Tokens(PLUS, '+')

            if self.current_char == '-':
                self.advance()
                return Tokens(MINUS, '-')

            if self.current_char == '*':
                self.advance()
                return Tokens(MUL, '*')

            if self.current_char == '/':
                self.advance()
                return Tokens(DIV, '/')

            if self.current_char == '(':
                self.advance()
                return Tokens(LPAREN, '(')

            if self.current_char == ')':
                self.advance()
                return Tokens(RPAREN, ')')

            self.error()

        return Tokens(EOF, None)


class Interpreter(object):
    def init(self, lexer):
        self.lexer = lexer
        self.current_tok = self.lexer.gnt()

    def error(self):
        raise Exception('Invalid syntax')

    def takeover(self, token_type):
        if self.current_tok.type == token_type:
            self.current_tok = self.lexer.gnt()
        else:
            self.error()

    def fac(self): #factor
        token = self.current_tok
        if token.type == INTEGER:
            self.takeover(INTEGER)
            return token.value
        elif token.type == LPAREN:
            self.takeover(LPAREN)
            result = self.expr()
            self.takeover(RPAREN)
            return result

    def term(self):
        result = self.fac()

        while self.current_tok.type in (MUL, DIV):
            token = self.current_tok
            if token.type == MUL:
                self.takeover(MUL)
                result = result * self.fac()
            elif token.type == DIV:
                self.takeover(DIV)
                result = result // self.fac()

        return result

    def expr(self):
  
        result = self.term()

        while self.current_tok.type in (PLUS, MINUS):
            token = self.current_tok
            if token.type == PLUS:
                self.takeover(PLUS)
                result = result + self.term()
            elif token.type == MINUS:
                self.takeover(MINUS)
                result = result - self.term()

        return result


def main():
    while True:
        try:
            text = input('calc> ')
        except EOFError:
            break
        if not text:
            continue
        interpreter = Interpreter(lexer)
        lexer = Lexer(text)
        result = interpreter.expr()
        print(result)


if __name__ == '__main__':
    main()
